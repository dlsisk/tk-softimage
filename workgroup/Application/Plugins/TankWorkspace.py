# TankWorkspace
# Initial code generated by Softimage SDK Wizard
# Executed Wed Oct 10 15:57:55 EDT 2012 by bgabe
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import os

import win32com.client
from win32com.client import constants

import tank

null = None
false = 0
true = 1

def XSILoadPlugin( in_reg ):
    in_reg.Author = "bgabe"
    in_reg.Name = "TankWorkspace"
    in_reg.Major = 1
    in_reg.Minor = 0

    in_reg.RegisterCommand("Tank_SetProjectFromContext","Tank_SetProjectFromContext")
    in_reg.RegisterCommand("Tank_SetProjectListFromContext","Tank_SetProjectListFromContext")
    #RegistrationInsertionPoint - do not remove this line

    return true

def XSIUnloadPlugin( in_reg ):
    strPluginName = in_reg.Name
    Application.LogMessage(str(strPluginName) + str(" has been unloaded."),constants.siVerbose)
    return true

def Tank_SetProjectFromContext_Init( in_ctxt ):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.ReturnValue = true

    return true

def Tank_SetProjectFromContext_Execute(  ):
    caller = "Tank_SetProjectFromContext"

    #Verify Tank Engine is running
    engine = tank.platform.current_engine()
    if not engine:
        Application.LogMessage("%s() -- No Tank engine currently running." % caller, 2)
        return
    
    #Verify Step
    step = engine.context.step
    if not step:
        Application.LogMessage("%s() -- Current tank engine requires a 'step' context in order to set a Project." % caller, 2)
        return
    
    #Softimage engine method:
    #   1) If directory structure does not exist, builds workspace
    #   2) Sets current Softimage project to the tank workspace path
    #   3) Calls Tank_SetProjectListFromContext() in order to add the tank project to the project manager
    engine._set_project()
    
def Tank_SetProjectListFromContext_Init( in_ctxt ):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.ReturnValue = true

    return true

def Tank_SetProjectListFromContext_Execute(  ):
    caller = "Tank_SetProjectListFromContext"

    #Verify Tank Engine is running
    engine = tank.platform.current_engine()
    if not engine:
        Application.LogMessage("%s() -- No Tank engine currently running." % caller, 2)
        return
    
    #Verify Step
    step = engine.context.step
    if not step:
        Application.LogMessage("%s() -- Current tank engine requires a 'step' context in order to set the ProjectList." % caller, 2)
        return
    
    template_name = engine.get_setting("template_project")
    tmpl = engine.tank.templates.get(template_name)
    fields = engine.context.as_template_fields(tmpl)
    proj_path = tmpl.apply_fields(fields)
    seq_shot = fields.get("Sequence")+"_"+fields.get("Shot")
    
    #Find workgroup/Data/tank.xsiprojects file
    nodes = __sipath__.split(os.sep)
    path = os.sep.join(nodes[:-2])
    path = os.path.join(path, "Data", "tank.xsiprojects")
    
    try:
        file = open(path, 'w')
        file.write(proj_path+", "+seq_shot)
        file.close()
    except:
        Application.LogMessage("%s() -- Failed to write to xsiprojects file in Tank workgroup" % caller, 2)
        return

    Application.LogMessage("Updated Workgroup xsiprojects file: "+proj_path+", "+seq_shot)
    return true