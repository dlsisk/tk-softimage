# TankEngine
# Initial code generated by Softimage SDK Wizard
# Executed Wed Oct 3 15:54:14 EDT 2012 by bgabe
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
import os
from win32com.client import constants
import tank

null = None
false = 0
true = 1

def XSILoadPlugin( in_reg ):
    in_reg.Author = "bgabe"
    in_reg.Name = "TankEngine"
    in_reg.Major = 1
    in_reg.Minor = 0

    in_reg.RegisterCommand("Tank_StartEngine","Tank_StartEngine")
    in_reg.RegisterCommand("Tank_CheckEngine","Tank_CheckEngine")
    in_reg.RegisterCommand("Tank_DestroyEngine","Tank_DestroyEngine")
    in_reg.RegisterCommand("Tank_StartEngine_DEV","Tank_StartEngine_DEV")
    #RegistrationInsertionPoint - do not remove this line

    return true

def XSIUnloadPlugin( in_reg ):
    strPluginName = in_reg.Name
    Application.LogMessage(str(strPluginName) + str(" has been unloaded."),constants.siVerbose)
    return true

#########################################################################################
def Tank_StartEngine_Init( in_ctxt ):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.ReturnValue = true

    oArgs = oCmd.Arguments
    oArgs.Add("project_root",constants.siArgumentInput)
    oArgs.Add("context_path",constants.siArgumentInput)
    return true

def Tank_StartEngine_Execute( project_root, context_path ):

    #Verify Engine is not already running
    engine = tank.platform.current_engine()
    if engine:
        Application.LogMessage("Could not start new Tank engine as one is already running: "+str(engine), 4)
        return

    #Determine if Command is being run by script or by OnStartup Event
    #(for OnStartup: If the Environment variables are populated, override the input)
    use_entity = 0
    env_project_root = os.environ.get("TANK_SOFTIMAGE_PROJECT_ROOT", "")
    if env_project_root:
        use_entity = 1
        project_root = env_project_root
        entity_id = int(os.environ.get("TANK_SOFTIMAGE_ENTITY_ID", "0"))
        entity_type = os.environ.get("TANK_SOFTIMAGE_ENTITY_TYPE", "")
    
    #Verify project_root input
    if not project_root:
        Application.LogMessage("Tank_StartEngine(arg0) -- missing required 'project_root' argument!", 2)
        return
    
    #Instantiate the tank API Object
    try:
        tk = tank.Tank(project_root)
    except Exception, e:    
        print e
        Application.LogMessage("Failed to instantiate Tank API object at project_root: "+project_root, 2)
        return
    
    #Get context based on entity pulled from env vars
    if use_entity:
        print "Tank context from env vars"
    
        #Verify entity_type
        if not entity_type:
            Application.LogMessage("Tank_StartEngine(arg1) -- missing required 'entity_type' argument!", 2)
            return
        
        #Verify entity_id
        if not entity_id:
            Application.LogMessage("Tank_StartEngine(arg1) -- missing required 'entity_id' argument!", 2)
            return
        
        #Attempt to get context from entity_type and entity_id
        try:
            ctx = tk.context_from_entity(entity_type, entity_id)
        except Exception, e:    
            print e
            Application.LogMessage("Failed to create context object from entity_type and entity_id: %s: %d" % (entity_type, entity_id), 2)
            return

    #Get context based on input path strings
    elif not use_entity:
        print "Tank context from path: ", context_path
        
        #Verify input context_path
        if not context_path:
            contect_path = project_root
            Application.LogMessage("Tank_StartEngine(arg1) -- missing 'context_path' argument, using project_root", 4)
    
        #Get Context object from input context_path
        try:
            ctx = tk.context_from_path(context_path)
        except Exception, e:    
            print e
            Application.LogMessage("Failed to create context object from context_path: "+context_path, 2)
            return
    
    #Start the Tank Engine for Softimage--------------------------------------------------
    oPB = XSIUIToolkit.ProgressBar
    oPB.Caption = "Loading Softimage Tank Engine..."
    oPB.Maximum = 1
    oPB.CancelEnabled = 0
    oPB.Visible = 1
    
    engine_name = "tk-softimage"
    try:
        engine = tank.platform.start_engine(engine_name, tk, ctx)
            
    except Exception, e:    
        print e
        Application.LogMessage("Failed to start Tank Engine!", 2)
        oPB.Visible = 0
        return

    oPB.Increment()
    oPB.Visible = 0

    if not engine:
        return
        
    #Once the engine is started, load the TankMenu Plugin
    try:
        TankMenuPath = __sipath__+os.sep+"TankMenu.py"
        Application.UnloadPlugin(TankMenuPath)
        Application.LoadPlugin(TankMenuPath)
        
    except:
        Application.LogMessage("Tank_StartEngine() -- Failed to reset 'TankMenu' Plugin!", 2)

    Application.LogMessage("Tank_StartEngine() -- Tank Engine Started: "+str(engine))
    
    return true

#########################################################################################
def start_tank_engine(project_root, context_path):  
    
    #Verify Engine is not already running
    engine = tank.platform.current_engine()
    if engine:
        Application.LogMessage("Could not start new Tank engine as one is already running: "+str(engine), 4)
        return
        
    #Instantiate the tank API Object
    try:
        tk = tank.Tank(project_root)
        
    except Exception, e:    
        print e
        Application.LogMessage("Failed to instantiate Tank API object at project_root: "+project_root, 2)
        return
        
    #Get Context object from input context_path
    try:
        ctx = tk.context_from_path(context_path)
    except Exception, e:    
        print e
        Application.LogMessage("Failed to create context object from context_path: "+context_path, 2)
        return

    #Start the Tank Engine for Softimage
    engine_name = "tk-softimage"
    try:
        engine = tank.platform.start_engine(engine_name, tk, ctx)
            
    except Exception, e:    
        print e
        Application.LogMessage("Failed to start Tank Engine!", 2)
        return

    return engine
    
    
#########################################################################################
def Tank_CheckEngine_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.ReturnValue = true
    return true

def Tank_CheckEngine_Execute():
    try:
        import tank
        engine = tank.platform.current_engine()
        if engine:
            Application.LogMessage(engine)
        else:
            Application.LogMessage("Tank_CheckEngine() -- No Tank engine currently running!", 8)
    except:
        Application.LogMessage("Tank_CheckEngine() -- Failed to get current Tank engine!", 2)
        
        
#########################################################################################
def Tank_DestroyEngine_Init(in_ctxt):
    oCmd = in_ctxt.Source
    oCmd.Description = ""
    oCmd.ReturnValue = true
    return true

def Tank_DestroyEngine_Execute():    

    try:
        import tank
        engine = tank.platform.current_engine()
    
        if not engine:
            Application.LogMessage("Tank_DestroyEngine() -- No Tank engine currently running!", 8)
            return
            
        engineStr = str(engine)    
        engine.destroy()

    except:
        Application.LogMessage("Tank_DestroyEngine() -- Failed to destroy current Tank engine!", 2)
        #tank.log_error()
        return
        
    #Once the engine is destroyed, Reset the TankMenu Plugin
    try:
        TankMenuPath = __sipath__+os.sep+"TankMenu.py"
        Application.UnloadPlugin(TankMenuPath)
        Application.LoadPlugin(TankMenuPath)
        
    except:
        Application.LogMessage("Tank_DestroyEngine() -- Failed to reset 'TankMenu' Plugin!", 2)
        
    Application.LogMessage("Tank_DestroyEngine() -- Tank engine destroyed: "+engineStr, 8)


#########################################################################################